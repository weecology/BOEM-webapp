import streamlit as st
import leafmap.foliumap as leafmap
import geopandas as gpd
import sys
from pathlib import Path
import sqlite3
import pandas as pd
from utils.styling import load_css

# Must be the first Streamlit command
st.set_page_config(
    page_title="Observations",
    page_icon="🗺️",
    layout="wide"
)

# Add the project root to the Python path
root_dir = str(Path(__file__).parents[2].absolute())
if root_dir not in sys.path:
    sys.path.append(root_dir)

def load_vector(file_path):
    """Load and cache vector data"""
    if file_path.endswith('.mbtiles'):
        # Connect to MBTiles file
        conn = sqlite3.connect(file_path)
        # Extract metadata
        metadata = dict(conn.execute('SELECT * FROM metadata').fetchall())
        # Get the center coordinates from metadata
        center = metadata.get('center', '0,0,2').split(',')
        lon, lat = float(center[0]), float(center[1])
        zoom = int(center[2]) if len(center) > 2 else 2
        attribution = metadata.get('attribution', 'Generated by Tippecanoe')
        return None, lon, lat, zoom, metadata.get('name', 'MBTiles Layer'), attribution
    else:
        return gpd.read_file(file_path), None, None, None, None, None

def app():
    # Create the map
    m = leafmap.Map(
        center=[40, -70],
        zoom=6,
    )
    
    # Get the app's data directory
    app_data_dir = Path(__file__).parents[1] / "data"
    
    # Create columns for map and controls
    col1, col2 = st.columns([4, 1])  # 4:1 ratio to make control column narrow
    
    # Add controls in col2 first
    with col2:
        # Load data first to get unique labels
        default_file = app_data_dir / "all_predictions.shp"
        if default_file.exists():
            gdf = gpd.read_file(default_file)
            # drop na labels
            gdf = gdf[gdf['cropmodel_'].notna()]
            unique_labels = sorted(gdf['cropmodel_'].unique())
            
            # Add score threshold slider
            score_threshold = st.slider(
                "Confidence Score",  # Shortened label
                min_value=0.0,
                max_value=1.0,
                value=0.25,
                step=0.05,
                help="Filter observations by confidence score"
            )
            
            # Add label filter
            selected_labels = st.multiselect(
                "Species",
                options=unique_labels,
                default=unique_labels,
                help="Select species to display"
            )
    
    with col1:
        # Create map
        m.add_basemap("OpenStreetMap")
        
        if default_file.exists():
            try:
                # Filter data based on both score threshold and selected labels
                filtered_gdf = gdf[
                    (gdf['score'] >= score_threshold) & 
                    (gdf['cropmodel_'].isin(selected_labels))
                ]
                
                if len(filtered_gdf) == 0:
                    st.warning("No observations meet the selected filters")
                else:
                    # Create popup with image and metadata
                    filtered_gdf['popup'] = filtered_gdf.apply(
                        lambda x: f"""
                        <div style="width:300px">
                            <img src="{x['crop_api_path']}" width="100%"/>
                            <p><b>Species:</b> {x['cropmodel_']}</p>
                            <p><b>Score:</b> {x['score']:.2f}</p>
                        </div>
                        """, 
                        axis=1
                    )
                    
                    # Add GeoDataFrame with popup
                    m.add_gdf(
                        filtered_gdf,
                        layer_name=f"Observations (score ≥ {score_threshold})",
                        style={'fillColor': "#0000FF"},
                        popup=filtered_gdf['popup'].tolist(),
                        tooltip=filtered_gdf['cropmodel_'].tolist()
                    )
            except Exception as e:
                st.error(f"Error processing vector data: {str(e)}")
        else:
            st.error(f"Data file not found: {default_file}")
        
        # Display map
        m.to_streamlit(height=700, width=None)
    
    # Add download button in col2
    with col2:
        if default_file.exists():
            try:
                # Save filtered data to temporary file
                temp_file = app_data_dir / "temp_filtered.shp"
                filtered_gdf.to_file(temp_file)
                
                with open(temp_file, 'rb') as file:
                    shapefile_bytes = file.read()
                    st.download_button(
                        label="Download Data",
                        data=shapefile_bytes,
                        file_name=f"predictions_filtered.shp",
                        mime="application/octet-stream",
                        help=f"Download filtered observations (score ≥ {score_threshold})"
                    )
                
                # Clean up temporary file
                temp_file.unlink()
            except Exception as e:
                st.error(f"Error preparing download: {str(e)}")
    
    # Instructions below everything
    st.info("""
    **How to use:**
    - Click on any point on the map to view its metadata
    - Use the confidence score slider to filter observations
    - Select species to show/hide from the map
    """)

def process_vector_file(file_path, m, color):
    """Process and add vector file to map"""
    try:
        gdf, lon, lat, zoom, layer_name, attribution = load_vector(str(file_path))
        
        if gdf is not None:
            # Regular vector file
            m.add_gdf(
                gdf,
                layer_name=f"Vector Layer - {file_path.stem}",
                style={'fillColor': color}
            )
        else:
            # MBTiles file
            xyz_url = f"mbtiles://{file_path.absolute()}"
            m.add_tile_layer(
                url=xyz_url,
                name=layer_name or f"MBTiles Layer - {file_path.stem}",
                attribution=attribution
            )
            
            if lon is not None and lat is not None:
                m.set_center(lon, lat, zoom)
    
    except Exception as e:
        raise Exception(f"Error processing {file_path.name}: {str(e)}")

if __name__ == "__main__":
    load_css()
    app()